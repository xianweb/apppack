(window.webpackJsonp=window.webpackJsonp||[]).push([[5],{105:function(e,r,n){"use strict";n.r(r);var a=n(0),t=Object(a.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var e=this,r=e.$createElement,n=e._self._c||r;return n("div",{staticClass:"content"},[n("h1",{attrs:{id:"electron-ipcrenderer-模块"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#electron-ipcrenderer-模块","aria-hidden":"true"}},[e._v("#")]),e._v(" Electron ipcRenderer 模块")]),n("p",[n("code",[e._v("ipcRenderer")]),e._v(" 模块是一个 "),n("code",[e._v("EventEmitter")]),e._v(" 类的实例. 它提供了有限的方法，你可以从渲染进程向主进程发送同步或异步消息. 也可以收到主进程的相应。")]),n("h2",{attrs:{id:"消息监听"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#消息监听","aria-hidden":"true"}},[e._v("#")]),e._v(" 消息监听")]),n("p",[n("code",[e._v("ipcRenderer")]),e._v(" 模块有下列方法来监听事件：")]),n("h3",{attrs:{id:"ipcrenderer-on-channel-listener"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#ipcrenderer-on-channel-listener","aria-hidden":"true"}},[e._v("#")]),e._v(" ipcRenderer.on(channel, listener)")]),n("ul",[n("li",[n("strong",[e._v("channel")]),e._v(" String")]),n("li",[n("strong",[e._v("listener")]),e._v(" Function")])]),n("p",[e._v("监听 "),n("code",[e._v("channel")]),e._v(", 当有新消息到达，使用 "),n("code",[e._v("listener(event, args...)")]),e._v(" 调用 "),n("code",[e._v("listener")]),e._v("。")]),n("h3",{attrs:{id:"ipcrenderer-once-channel-listener"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#ipcrenderer-once-channel-listener","aria-hidden":"true"}},[e._v("#")]),e._v(" ipcRenderer.once(channel, listener)")]),n("ul",[n("li",[n("strong",[e._v("channel")]),e._v(" String")]),n("li",[n("strong",[e._v("listener")]),e._v(" Function")])]),n("p",[e._v("为事件添加一个一次性用的"),n("code",[e._v("listener")]),e._v(" 函数.这个 "),n("code",[e._v("listener")]),e._v(" 只有在下次的消息到达 "),n("code",[e._v("channel")]),e._v(" 时被请求调用，之后就被删除了。")]),n("h3",{attrs:{id:"ipcrenderer-removelistener-channel-listener"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#ipcrenderer-removelistener-channel-listener","aria-hidden":"true"}},[e._v("#")]),e._v(" ipcRenderer.removeListener(channel, listener)")]),n("ul",[n("li",[n("strong",[e._v("channel")]),e._v(" String")])]),n("p",[e._v("删除所有监听者，或特指的 "),n("code",[e._v("channel")]),e._v(" 的所有监听者。")]),n("h2",{attrs:{id:"发送消息"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#发送消息","aria-hidden":"true"}},[e._v("#")]),e._v(" 发送消息")]),n("p",[n("code",[e._v("ipcRenderer")]),e._v(" 模块有如下方法来发送消息：")]),n("h3",{attrs:{id:"ipcrenderer-send-channel-arg1-arg2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#ipcrenderer-send-channel-arg1-arg2","aria-hidden":"true"}},[e._v("#")]),e._v(" ipcRenderer.send(channel[, arg1][, arg2][, ...])")]),n("ul",[n("li",[n("code",[e._v("channel")]),e._v(" String")]),n("li",[n("code",[e._v("arg")]),e._v(" (可选)")])]),n("p",[e._v("通过 "),n("code",[e._v("channel")]),e._v(" 向主进程发送异步消息，也可以发送任意参数。参数会被"),n("code",[e._v("JSON")]),e._v("序列化，之后就不会包含函数或原型链。")]),n("p",[e._v("主进程通过使用 "),n("code",[e._v("ipcMain")]),e._v(" 模块来监听 "),n("code",[e._v("channel")]),e._v("，从而处理消息。")]),n("h3",{attrs:{id:"ipcrenderer-sendsync-channel-arg1-arg2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#ipcrenderer-sendsync-channel-arg1-arg2","aria-hidden":"true"}},[e._v("#")]),e._v(" ipcRenderer.sendSync(channel[, arg1][, arg2][, ...])")]),n("ul",[n("li",[n("code",[e._v("channel")]),e._v(" String")]),n("li",[n("code",[e._v("arg")]),e._v(" (可选)")])]),n("p",[e._v("通过 "),n("code",[e._v("channel")]),e._v(" 向主进程发送同步消息，也可以发送任意参数。参数会被JSON序列化，之后就不会包含函数或原型链。")]),n("p",[e._v("主进程通过使用 "),n("code",[e._v("ipcMain")]),e._v(" 模块来监听 "),n("code",[e._v("channel")]),e._v("，从而处理消息, 通过 "),n("strong",[n("code",[e._v("event.returnValue")])]),e._v(" 来响应。")]),n("div",{staticClass:"danger custom-block"},[n("p",{staticClass:"custom-block-title"},[e._v("注意")]),n("p",[e._v("发送同步消息将会阻塞整个渲染进程，除非你知道你在做什么，否则就永远不要用它。")])])])}],!1,null,null,null);r.default=t.exports}}]);